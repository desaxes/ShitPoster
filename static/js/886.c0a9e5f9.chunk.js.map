{"version":3,"file":"static/js/886.c0a9e5f9.chunk.js","mappings":"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","sources":["components/posts/post-page.tsx"],"sourcesContent":["import s from './post.module.css'\r\nimport React from 'react'\r\nimport comment from './../../img/com_item.png'\r\nimport { connect, useDispatch, useSelector } from 'react-redux';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport { useEffect } from 'react';\r\nimport { openPost, addComment, like } from '../../redux/news-reducer.ts';\r\nimport { addToLikeList } from '../../redux/auth-reducer.ts';\r\nimport { useForm } from 'react-hook-form';\r\nimport { Textarea } from '@mantine/core'\r\nimport avatar from './../../img/shit_icon.png'\r\nimport { AppDispatch, appStateType } from '../../redux/redux-store.ts';\r\nimport { compose } from 'redux';\r\nimport * as authSelectors from '../../redux/auth-selectors.ts'\r\nimport * as newsSelectors from '../../redux/news-selectors.ts'\r\nimport { getCurrentPost } from './../../redux/news-selectors';\r\n\r\ntype props = ownPPProps\r\nconst PostPage: React.FC<props> = (props) => {\r\n\r\n    const post = useSelector(newsSelectors.getCurrentPost)\r\n    const login = useSelector(authSelectors.getLogin)\r\n    const likeList = useSelector(authSelectors.getLikedPosts)\r\n    const isAuth = useSelector(authSelectors.getIsAuth)\r\n    const authPhoto = useSelector(authSelectors.getAuthPhoto)\r\n    const dispatch: AppDispatch = useDispatch()\r\n    const { register, handleSubmit, reset } = useForm()\r\n    let postId = useParams()\r\n    const navigate = useNavigate()\r\n    useEffect(() => {\r\n        props.news.filter(post => {\r\n            if (post.id === postId.id) {\r\n                dispatch(openPost(post.id, post.userId,\r\n                    post.name, post.time, post.posttext,\r\n                    post.like_count, post.postimage, post.avatar, post.comments))\r\n            }\r\n        })\r\n    }, [postId, props.news])\r\n    const comments = post.comments.map(c => <Comment key={c.id} ava={c.avatar} name={c.name} text={c.text} />)\r\n    const sendComment = (e: any) => {\r\n        dispatch(addComment(postId.id as string, authPhoto as string, login as string, e.com))\r\n        reset()\r\n    }\r\n    const likePost = () => {\r\n        if (isAuth === true) {\r\n            dispatch(like(post.id))\r\n            dispatch(addToLikeList(post.id))\r\n        }\r\n    }\r\n    const toProfile = () => {\r\n        navigate('/profile/' + post.userId)\r\n    }\r\n    return (\r\n        <div className={s.post}>\r\n            <div className={s.inner}>\r\n                <div onClick={toProfile} className={s.header}>\r\n                    <div className={s.avatar}>\r\n                        <img src={post.avatar} alt=\"\" />\r\n                    </div>\r\n                    <div className={s.name}>\r\n                        {post.name}\r\n                    </div>\r\n                    <div className={s.date}>\r\n                        {post.time}\r\n                    </div>\r\n                </div>\r\n                <div className={s.post_image}>\r\n                    <img src={post.postimage} alt=\"\" />\r\n                </div>\r\n                <div className={s.text_block}>\r\n                    <p>{post.posttext}</p>\r\n                </div>\r\n                <div className={s.footer}>\r\n                    <div className={s.left_block}>\r\n                        <button className={s.comments}>\r\n                            <img src={comment} alt=\"\" />\r\n                        </button>\r\n                        <div className={s.comments_counter}>\r\n                            {post.comments.length}\r\n                        </div>\r\n                    </div>\r\n                    <div className={s.right_block}>\r\n                        <div className={s.likes_dislikes__counter}>\r\n                            {post.like_count}\r\n                        </div>\r\n                        <div className={s.like}>\r\n                            <button disabled={likeList.some(id => id === post.id)}\r\n                                onClick={likePost} type=\"button\" className={`${s.like_btn} ${likeList.some(id => id === post.id) && isAuth && s.liked}`}>‚ù§</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className={s.comments_box}>\r\n                    {isAuth && <form onSubmit={handleSubmit(sendComment)} className={s.form}>\r\n                        <div className={s.textbox}><Textarea required {...register('com')} placeholder='Comment' /></div>\r\n                        <div className={s.btn_box}><input value={'Comment'} className='quick-posting__btn' type=\"submit\" /></div>\r\n                    </form>}\r\n                    {comments}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\ntype commentType = {\r\n    ava: string\r\n    name: string\r\n    text: string\r\n}\r\n\r\nconst Comment: React.FC<commentType> = (props) => {\r\n    return (\r\n        <div className={s.comment}>\r\n            <div className={s.com_header}>\r\n                <img className={s.com_ava} src={props.ava === null ? avatar : props.ava} alt=\"\" />\r\n                <div className={s.com_name}>{props.name}</div>\r\n            </div>\r\n            <div className={s.com_text}>{props.text}</div>\r\n        </div>\r\n    )\r\n}\r\nexport default PostPage;"],"names":["Comment","props","_jsxs","className","s","children","_jsx","src","ava","avatar","alt","name","text","post","useSelector","newsSelectors","login","authSelectors","likeList","isAuth","authPhoto","dispatch","useDispatch","_useForm","useForm","register","handleSubmit","reset","postId","useParams","navigate","useNavigate","useEffect","news","filter","id","openPost","userId","time","posttext","like_count","postimage","comments","map","c","onClick","comment","length","disabled","some","like","addToLikeList","type","concat","onSubmit","e","addComment","com","Textarea","_objectSpread","required","placeholder","value"],"sourceRoot":""}