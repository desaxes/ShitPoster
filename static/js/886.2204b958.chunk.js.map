{"version":3,"file":"static/js/886.2204b958.chunk.js","mappings":"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","sources":["components/common_components/functions.ts","components/posts/post-page.tsx"],"sourcesContent":["export const scrollUp = () => {\r\n    window.scrollTo({\r\n        top: 0,\r\n        left: 0,\r\n        behavior: 'smooth',\r\n    })\r\n}","import s from './post.module.css'\r\nimport React from 'react'\r\nimport comment from './../../img/com_item.png'\r\nimport { connect, useDispatch, useSelector } from 'react-redux';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport { useEffect } from 'react';\r\nimport { openPost, addComment, like, dislike } from '../../redux/news-reducer.ts';\r\nimport { addToLikeList, removeFromLikeList } from '../../redux/auth-reducer.ts';\r\nimport { useForm } from 'react-hook-form';\r\nimport { Textarea } from '@mantine/core'\r\nimport avatar from './../../img/shit_icon.png'\r\nimport { AppDispatch, appStateType } from '../../redux/redux-store.ts';\r\nimport { compose } from 'redux';\r\nimport * as authSelectors from '../../redux/auth-selectors.ts'\r\nimport * as newsSelectors from '../../redux/news-selectors.ts'\r\nimport { getCurrentPost } from './../../redux/news-selectors';\r\nimport { scrollUp } from '../common_components/functions.ts';\r\n\r\ntype props = ownPPProps\r\nconst PostPage: React.FC<props> = (props) => {\r\n    useEffect(() => {\r\n        scrollUp()\r\n    }, [])\r\n    const post = useSelector(newsSelectors.getCurrentPost)\r\n    const authId = useSelector(authSelectors.getAuthId)\r\n    const login = useSelector(authSelectors.getLogin)\r\n    const likeList = useSelector(authSelectors.getLikedPosts)\r\n    const isAuth = useSelector(authSelectors.getIsAuth)\r\n    const authPhoto = useSelector(authSelectors.getAuthPhoto)\r\n    const dispatch: AppDispatch = useDispatch()\r\n    const { register, handleSubmit, reset } = useForm()\r\n    let postId = useParams()\r\n    const navigate = useNavigate()\r\n    useEffect(() => {\r\n        props.news.filter(post => {\r\n            if (post.id === postId.id) {\r\n                dispatch(openPost(post.id, post.userId,\r\n                    post.name, post.time, post.posttext,\r\n                    post.like_count, post.postimage, post.avatar, post.comments))\r\n            }\r\n        })\r\n    }, [postId, props.news])\r\n    const comments = post.comments.map(c => <Comment key={c.id} ava={c.avatar} name={c.name} text={c.text} />)\r\n    const sendComment = (e: any) => {\r\n        dispatch(addComment(postId.id as string, authPhoto as string, login as string, e.com))\r\n        reset()\r\n    }\r\n    const likePost = () => {\r\n        if (likeList.some((e) => e === post.id)) {\r\n            let newLikeList = likeList.filter(e => e != post.id)\r\n            dispatch(dislike(post.id))\r\n            dispatch(removeFromLikeList(newLikeList))\r\n        }\r\n        else {\r\n            if (isAuth === true && post.userId != authId) {\r\n                dispatch(like(post.id))\r\n                dispatch(addToLikeList(post.id))\r\n            }\r\n        }\r\n    }\r\n    const toProfile = () => {\r\n        navigate('/ShitPoster/profile/' + post.userId)\r\n    }\r\n    return (\r\n        <div className={s.post}>\r\n            <div className={s.inner}>\r\n                <div onClick={toProfile} className={s.header}>\r\n                    <div className={s.avatar}>\r\n                        <img src={post.avatar} alt=\"\" />\r\n                    </div>\r\n                    <div className={s.name}>\r\n                        {post.name}\r\n                    </div>\r\n                    <div className={s.date}>\r\n                        {post.time}\r\n                    </div>\r\n                </div>\r\n                {post.postimage != '' && <div className={s.post_image}>\r\n                    <img src={post.postimage} alt=\"\" />\r\n                </div>}\r\n                <div className={s.text_block}>\r\n                    <p>{post.posttext}</p>\r\n                </div>\r\n                <div className={s.footer}>\r\n                    <div className={s.left_block}>\r\n                        <button className={s.comments}>\r\n                            <img src={comment} alt=\"\" />\r\n                        </button>\r\n                        <div className={s.comments_counter}>\r\n                            {post.comments.length}\r\n                        </div>\r\n                    </div>\r\n                    <div className={s.right_block}>\r\n                        <div className={s.likes_dislikes__counter}>\r\n                            {post.like_count}\r\n                        </div>\r\n                        <div className={s.like}>\r\n                            <button\r\n                                onClick={likePost} type=\"button\" className={`${s.like_btn} ${likeList.some(id => id === post.id) && isAuth && s.liked}`}>‚ù§</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className={s.comments_box}>\r\n                    {isAuth && <form onSubmit={handleSubmit(sendComment)} className={s.form}>\r\n                        <div className={s.textbox}><Textarea required {...register('com')} placeholder='Comment' /></div>\r\n                        <div className={s.btn_box}><input value={'Comment'} className={`${'quick-posting__btn'} ${s.post_button}`} type=\"submit\" /></div>\r\n                    </form>}\r\n                    {comments}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\ntype commentType = {\r\n    ava: string\r\n    name: string\r\n    text: string\r\n}\r\n\r\nconst Comment: React.FC<commentType> = (props) => {\r\n    return (\r\n        <div className={s.comment}>\r\n            <div className={s.com_header}>\r\n                <img className={s.com_ava} src={props.ava === null ? avatar : props.ava} alt=\"\" />\r\n                <div className={s.com_name}>{props.name}</div>\r\n            </div>\r\n            <div className={s.com_text}>{props.text}</div>\r\n        </div>\r\n    )\r\n}\r\nexport default PostPage;"],"names":["scrollUp","window","scrollTo","top","left","behavior","Comment","props","_jsxs","className","s","children","_jsx","src","ava","avatar","alt","name","text","useEffect","post","useSelector","newsSelectors","authId","authSelectors","login","likeList","isAuth","authPhoto","dispatch","useDispatch","_useForm","useForm","register","handleSubmit","reset","postId","useParams","navigate","useNavigate","news","filter","id","openPost","userId","time","posttext","like_count","postimage","comments","map","c","onClick","comment","length","some","e","newLikeList","dislike","removeFromLikeList","like","addToLikeList","type","concat","onSubmit","addComment","com","Textarea","_objectSpread","required","placeholder","value"],"sourceRoot":""}