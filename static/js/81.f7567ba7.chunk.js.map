{"version":3,"file":"static/js/81.f7567ba7.chunk.js","mappings":"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","sources":["components/common_components/hoc-components.tsx","webpack://first_project/./src/components/messages/messages.module.css?2284","components/common_components/error.tsx","webpack://first_project/./src/components/chat/chat.module.css?354c","webpack://first_project/./src/components/chat/messagebox/messagebox.module.css?fc31","components/chat/messagebox/messagebox.tsx","webpack://first_project/./src/components/contact/contact.module.css?a575","components/contact/contact.tsx","components/chat/chat.tsx","components/messages/messages.tsx","redux/messages-selectors.ts"],"sourcesContent":["import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Navigate } from 'react-router-dom'\r\nimport { appStateType } from '../../redux/redux-store'\r\n\r\nconst mapStateToProps = (state: appStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\ntype props = {\r\n    isAuth: boolean\r\n}\r\nconst AuthRedirect = (Component: React.ComponentType<props>) => {\r\n    return connect(mapStateToProps)(function (props: props) {\r\n        if (props.isAuth === false) {\r\n            return <Navigate to='/ShitPoster/login' />\r\n        }\r\n        else { return <Component {...props} /> }\r\n    }\r\n    )\r\n}\r\nexport { AuthRedirect }","// extracted by mini-css-extract-plugin\nexport default {\"messages\":\"messages_messages__WSVRl\",\"inner\":\"messages_inner__ZANfK\"};","import React from 'react'\r\nimport s from './common.module.css'\r\n\r\nconst ErrorField = (props: { errorMessage: string|undefined }) => {\r\n    return (\r\n        <div>\r\n            <p className={s.error}>{props.errorMessage}</p>\r\n        </div>\r\n    )\r\n}\r\nexport { ErrorField }","// extracted by mini-css-extract-plugin\nexport default {\"chat_block\":\"chat_chat_block__KD7QV\",\"chat_window\":\"chat_chat_window__xDl-z\",\"text_box\":\"chat_text_box__n9fQq\",\"post_button\":\"chat_post_button__CLwVw\",\"contacts\":\"chat_contacts__16KaV\",\"contact_list\":\"chat_contact_list__L3WVh\",\"list_btn\":\"chat_list_btn__IFTyJ\",\"m_block\":\"chat_m_block__+D44q\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialog_name\":\"messagebox_dialog_name__FHH78\",\"messages\":\"messagebox_messages__UsyuR\",\"message_box\":\"messagebox_message_box__A6TT8\",\"message\":\"messagebox_message__Q8+iC\",\"in\":\"messagebox_in__obrtH\",\"out\":\"messagebox_out__NzI-N\",\"dialog_avatar\":\"messagebox_dialog_avatar__rs4lH\"};","import s from './messagebox.module.css'\r\nimport React from 'react'\r\nimport logo from './../../../img/shit_icon.png'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\ntype MessageType = {\r\n    id: string\r\n    inout: string\r\n    text: string\r\n}\r\nconst Message: React.FC<MessageType> = (props) => {\r\n    return (\r\n        <p className={`${s.message} ${props.inout}`}>\r\n            {props.text}\r\n        </p>\r\n    )\r\n}\r\ntype MessageboxProps = {\r\n    dialog: { id: string, name: string, avatar: any, messages: Array<{ id: string, inout: string, text: string }> } | undefined\r\n}\r\n\r\n\r\nconst Messagebox: React.FC<MessageboxProps> = (props) => {\r\n    let messages = () => {\r\n        if (props.dialog != undefined) {\r\n            return props.dialog.messages.map(m => <Message key={m.id} id={m.id} inout={m.inout} text={m.text} />)\r\n        }\r\n        else {\r\n\r\n        }\r\n    }\r\n    const navigate = useNavigate()\r\n    const toProfile = () => {\r\n        if (props.dialog != undefined) {\r\n            navigate('/ShitPoster/profile/' + props.dialog.id)\r\n        }\r\n    }\r\n    if (props.dialog != undefined) {\r\n        return (\r\n            <div>\r\n                <div className={s.dialog_name}>\r\n                    {props.dialog.avatar != '' ? <img onClick={toProfile} className={s.dialog_avatar} src={props.dialog.avatar} alt=\"\" />\r\n                        : <img className={s.dialog_avatar} src={logo} alt=\"\" />}\r\n                    <p onClick={toProfile}>{props.dialog != undefined && props.dialog.name}</p>\r\n                </div>\r\n                <div className={s.message_box}>\r\n                    <div className={s.messages}>\r\n                        {messages()}\r\n                    </div>\r\n                </div>\r\n            </div>)\r\n    }\r\n}\r\n\r\nexport default Messagebox;","// extracted by mini-css-extract-plugin\nexport default {\"contact_avatar\":\"contact_contact_avatar__pVgGZ\",\"contact_item\":\"contact_contact_item__XZMu+\",\"contact_name\":\"contact_contact_name__byeTb\"};","import { NavLink } from 'react-router-dom';\r\nimport React from 'react'\r\nimport s from './contact.module.css'\r\nimport { AppDispatch } from '../../redux/redux-store';\r\nimport { useDispatch } from 'react-redux';\r\nimport { dialogActions } from '../../redux/messages-reducer';\r\nimport logo from './../../img/shit_icon.png'\r\n\r\nconst Contact: React.FC<DialogType> = (props) => {\r\n    const dispatch: AppDispatch = useDispatch()\r\n    let chooseDialog = () => {\r\n        dispatch(dialogActions.currentDialog(props.id))\r\n    }\r\n    return (\r\n        <NavLink onClick={chooseDialog} to={'/ShitPoster/messages/' + props.id}>\r\n            <div className={s.contact_item}>\r\n                <div className={s.contact_avatar}>\r\n                    {props.avatar === '' ? < img src={logo} alt=\"\" /> : < img src={props.avatar} alt=\"\" />}\r\n                </div>\r\n                <div className={s.contact_name}>\r\n                    <p>{props.name}</p>\r\n                </div>\r\n            </div>\r\n        </NavLink>\r\n    )\r\n}\r\nexport default Contact;","import { ErrorField } from '../common_components/error';\r\nimport s from './chat.module.css'\r\nimport Messagebox from './messagebox/messagebox';\r\nimport React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport * as dialogSelectors from '../../redux/messages-selectors.ts'\r\nimport { useParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppDispatch } from '../../redux/redux-store.ts';\r\nimport { dialogActions } from '../../redux/messages-reducer';\r\nimport mes_style from './messagebox/messagebox.module.css';\r\nimport Contact from '../contact/contact.tsx';\r\n\r\n\r\nconst Chat: React.FC = () => {\r\n\r\n    const params = useParams()\r\n    const dialogsData = useSelector(dialogSelectors.getDialogsData)\r\n    const dialog = dialogsData.find(e => e.id === params.id)\r\n    let contacts = dialogsData.map(c => <Contact key={c.id} id={c.id} name={c.name} avatar={c.avatar} messages={c.messages} />\r\n    )\r\n    return (\r\n        <div className={s.chat_block}>\r\n            <div className=\"page-block\">\r\n                <div className={s.m_block}>\r\n                    <div className={s.contacts}>\r\n                        <button className='quick-posting__btn'><p>CONTACTS</p></button>\r\n                        <ul className={s.contact_list}>\r\n                            {contacts.length === 0 ? 'DIALOGS NOT FOUND' : contacts}\r\n                        </ul>\r\n                    </div>\r\n                    <div className={s.chat_window}>\r\n                        <Messagebox dialog={dialog} />\r\n                        {dialogsData.some(e => e.id === params.id) && <Mes_textbox />}\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype FormValues = {\r\n    messageText: string\r\n}\r\n\r\nconst Mes_textbox: React.FC = () => {\r\n    const params = useParams()\r\n    const dispatch: AppDispatch = useDispatch()\r\n    const { register, reset, handleSubmit, formState: { errors } } = useForm<FormValues>()\r\n    const onSubmit = (e: any) => {\r\n        if (params.id != null) {\r\n            dispatch(dialogActions.sendMessage(params.id, e.messageText, `${mes_style.out}`));\r\n            reset();\r\n            dispatch(dialogActions.sendMessage(params.id, \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Ex consequuntur ad officia, assumenda voluptas ullam.\", `${mes_style.in}`));\r\n        }\r\n        else {\r\n\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)} className={s.text_box}>\r\n            <textarea {...register('messageText', { required: \"✎ You must enter the text ⇒\" })}>\r\n            </textarea>\r\n            {errors?.messageText && <ErrorField errorMessage={errors?.messageText.message} />}\r\n            <div className='quick-posting-btnbox'>\r\n                <input value={'Send Message'} type='submit' className={`${'quick-posting__btn'} ${s.post_button}`} />\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport default Chat;\r\n","import React, { useEffect } from 'react'\r\nimport s from './messages.module.css'\r\nimport Chat from '../chat/chat';\r\nimport Contact from '../contact/contact';\r\nimport { AppDispatch } from '../../redux/redux-store';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport * as dialogSelectors from '../../redux/messages-selectors.ts'\r\nimport { useNavigate, useParams, useSearchParams } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\nimport { AuthRedirect } from '../common_components/hoc-components.tsx';\r\n\r\n\r\n\r\n\r\nconst Messages: React.FC = () => {\r\n    const params = useParams()\r\n    const navigate = useNavigate()\r\n    const currentDialog = useSelector(dialogSelectors.getCurrentDialog)\r\n    useEffect(() => {\r\n        if (params.id === undefined && currentDialog != '') {\r\n            navigate('/ShitPoster/messages/' + currentDialog)\r\n        }\r\n    }, [])\r\n    const dialogsData = useSelector(dialogSelectors.getDialogsData)\r\n\r\n    return (\r\n        <div className={s.messages}>\r\n            <div className={s.inner}>\r\n                {<Chat />}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default compose<React.FC>(\r\n    AuthRedirect,\r\n)(Messages)","import { appStateType } from \"./redux-store\"\r\n\r\nexport const getDialogsData = (state: appStateType) => {\r\n    return (state.messagesPage.dialogsData)\r\n}\r\nexport const getCurrentDialog = (state: appStateType) => {\r\n    return (state.messagesPage.currentDialog)\r\n}\r\n"],"names":["mapStateToProps","state","isAuth","auth","AuthRedirect","Component","connect","props","_jsx","Navigate","to","_objectSpread","ErrorField","children","className","s","errorMessage","Message","concat","inout","text","navigate","useNavigate","toProfile","undefined","dialog","id","_jsxs","avatar","onClick","src","alt","logo","name","messages","map","m","dispatch","useDispatch","NavLink","dialogActions","Mes_textbox","params","useParams","_useForm","useForm","register","reset","handleSubmit","errors","formState","onSubmit","e","messageText","mes_style","required","message","value","type","dialogsData","useSelector","dialogSelectors","find","contacts","c","Contact","length","Messagebox","some","compose","currentDialog","useEffect","Chat","getDialogsData","messagesPage","getCurrentDialog"],"sourceRoot":""}