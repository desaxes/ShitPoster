{"version":3,"file":"static/js/532.b679c334.chunk.js","mappings":"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","sources":["components/common_components/hoc-components.jsx","redux/profile-selectors.ts","components/profile/profile-status.tsx","components/profile/profile.tsx","components/profile/profile-container.tsx","redux/subs-selectors.ts"],"sourcesContent":["import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Navigate } from 'react-router-dom'\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        auth: state.auth\r\n    }\r\n}\r\n\r\nconst AuthRedirect = (Component) => {\r\n    return connect(mapStateToProps)(class extends React.Component {\r\n        render() {\r\n            if (this.props.auth.isAuth === false) {\r\n                return <Navigate to='/login' />\r\n            }\r\n            else { return <Component {...this.props} /> }\r\n        }\r\n    })\r\n}\r\nexport { AuthRedirect }","import { appStateType } from \"./redux-store\"\r\n\r\nexport const getPosts = (state: appStateType) => {\r\n    return (state.news.postData)\r\n}\r\nexport const getProfileInfo = (state: appStateType) => {\r\n    return (state.profilePage.profileInfo)\r\n}\r\nexport const getUserId = (state: appStateType) => {\r\n    return (state.profilePage.profileInfo.userId)\r\n}\r\nexport const getStatus = (state: appStateType) => {\r\n    return (state.profilePage.status)\r\n}","import React, { useState } from 'react'\r\nimport pencil from './../../img/pencil.png'\r\nimport pencilColor from './../../img/pencil_color.png'\r\nimport s from './profile.module.css'\r\nimport { useForm } from 'react-hook-form'\r\ntype props = {\r\n    setStatus: (id: number, status: string) => void\r\n    profileId: number\r\n    authId: number\r\n    status: string\r\n}\r\nconst ProfileStatus: React.FC<props> = (props) => {\r\n\r\n    const { register, reset } = useForm()\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [pencilMode, setPencilMode] = useState(false)\r\n    // useEffect(()=>{\r\n    //     console.log(pencilMode)\r\n    // },[pencilMode])\r\n    const changeImage = (mode: boolean) => {\r\n        setPencilMode(mode)\r\n    }\r\n    const activateEditMode = (e: any) => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = (e: any) => {\r\n        setEditMode(false)\r\n        props.setStatus(props.authId, e.currentTarget.value)\r\n        reset()\r\n    }\r\n    return (\r\n        <div className={s.status_field}>\r\n            {!editMode ?\r\n                <div>\r\n                    <q>{props.status}</q>\r\n                </div> :\r\n                <form>\r\n                    <input {...register('status')} autoFocus onBlur={deactivateEditMode} maxLength={25} className={s.status_input} placeholder={props.status}></input>\r\n                </form>\r\n            }\r\n            {props.profileId === props.authId && <div className={s.pencil_box}>\r\n                <img onClick={activateEditMode}\r\n                    onMouseLeave={(e) => { changeImage(false) }} onMouseEnter={(e) => { changeImage(true) }}\r\n                    src={pencilMode ? pencilColor : pencil}\r\n                    alt=\"\" />\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatus;","import React from 'react';\r\nimport profile_head_img from './../../img/profile_head.png'\r\nimport logo from './../../img/shit_icon.png'\r\nimport s from './profile.module.css'\r\nimport Post from '../posts/post.tsx'\r\nimport ProfileStatus from './profile-status';\r\nimport { useForm } from 'react-hook-form';\r\nimport { Accordion, Button, FileButton, Tabs, Textarea } from '@mantine/core';\r\n\r\ntype props = {\r\n    posts: postType[]\r\n    profileInfo: profileInfoType\r\n    userId: number\r\n    subscribeProgress: number[]\r\n    status: string\r\n    authId: number\r\n    authPhoto: string\r\n    login: string\r\n    addPost: (id: number, login: string, photo: string, image: string, time: string, text: string, likes: number) => void\r\n    getUserProfile: (userId: string) => void\r\n    setFollowedInfo: () => void\r\n    following: () => void\r\n    setStatus: () => void\r\n    setPhoto: (photo: string) => void\r\n    changeAuthPhoto: (id: number) => void\r\n}\r\n\r\nconst Profile: React.FC<props> = (props) => {\r\n    const { register, handleSubmit, reset, formState: { errors } } = useForm({ mode: 'onSubmit' });\r\n    let sortedPosts = [...props.posts].reverse().filter(e => e.userId === props.profileInfo.userId)\r\n\r\n    let posts = sortedPosts.map(p => <Post postId={p.userId} key={p.id} id={p.id} name={p.name} avatar={p.avatar} time={p.time}\r\n        postimage={p.postimage} posttext={p.posttext} like_count={p.like_count} comments={p.comments} />)\r\n    let rait = 0\r\n    for (let i = 0; i < posts.length; i++) {\r\n        const element = posts[i];\r\n        rait = rait + element.props.like_count\r\n    }\r\n    let onSubmit = (e: any) => {\r\n        props.addPost(props.authId, props.login, props.authPhoto, '', 'Now', e.postText, 0)\r\n        reset()\r\n    }\r\n    const setPhoto = (e: any) => {\r\n        // props.setPhoto(e.target.files[0])\r\n        props.setPhoto(e)\r\n        props.changeAuthPhoto(props.authId)\r\n    }\r\n    return (\r\n        <div className={s.profile}>\r\n            <div className={s.head}>\r\n                <img className={s.header} src={profile_head_img} alt='profile__header'></img>\r\n                <div className='page-block'>\r\n                    <Tabs defaultValue='Profile'>\r\n                        <Tabs.List grow>\r\n                            <Tabs.Tab value='Profile'>Profile</Tabs.Tab>\r\n                            <Tabs.Tab value='About'>About</Tabs.Tab>\r\n                            <Tabs.Tab value='Subs'>Subs</Tabs.Tab>\r\n                        </Tabs.List>\r\n                        <Tabs.Panel pt={30} value='Profile'>\r\n                            <div className={s.info_block}>\r\n                                <div className={s.avatar_box}>\r\n                                    <img className={s.avatar} src={props.profileInfo.photos.large === null ? logo : props.profileInfo.photos.large} alt='avatar'></img>\r\n                                    {props.profileInfo.userId === props.authId &&\r\n                                        <div className={s.photo_btn}>\r\n                                            <FileButton onChange={setPhoto} accept=\"image/png,image/jpeg\">\r\n                                                {(props) => <Button color='red' variant=\"subtle\" size='s' compact {...props}>💾</Button>}\r\n                                            </FileButton>\r\n                                        </div>\r\n                                    }\r\n                                </div>\r\n                                <div className={s.info_inf}>\r\n                                    <div className={s.name}>{props.profileInfo.fullName}</div>\r\n                                    {<ProfileStatus setStatus={props.setStatus} profileId={props.profileInfo.userId}\r\n                                        authId={props.authId} status={props.status} />}\r\n                                    <div className={s.desc_block}>\r\n                                        <p className={s.question}>Rating:</p>\r\n                                        <p className={s.answer}>{rait}</p>\r\n                                    </div>\r\n                                    <div className={s.desc_block}>\r\n                                        <p className={s.question}>Posts Counter:</p>\r\n                                        <p className={s.answer}>{posts.length}</p>\r\n                                    </div>\r\n                                </div>\r\n                                {props.profileInfo.userId != props.authId && <div className={s.btn_block}>\r\n                                    <div className='quick-posting-btnbox'>\r\n                                        <button className='quick-posting__btn'>Send Message</button>\r\n                                    </div>\r\n                                    <div className='quick-posting-btnbox'>\r\n                                        <button\r\n                                            // disabled={props.subscribeProgress.some(id => id === props.profileInfo.userId)} onClick={onSubClick} \r\n                                            className={`${'quick-posting__btn'} ${props.profileInfo.followed && s.f_color}`}>\r\n                                            {props.profileInfo.followed ? 'Unsubscribe' : 'Subscribe'}</button>\r\n                                    </div>\r\n                                    <div className='quick-posting-btnbox'>\r\n                                        <button className='quick-posting__btn'>Show Subs</button>\r\n                                    </div>\r\n                                </div>}\r\n                            </div>\r\n                        </Tabs.Panel>\r\n                        <Tabs.Panel pt={30} value='About'>\r\n                            <p className={s.about}>Full Name - {props.profileInfo.fullName === null ? '' : props.profileInfo.fullName}</p>\r\n                            {props.profileInfo.aboutMe === null ? <p className={s.about}>\"There could be a description of me here\"</p> : <p className={s.about}> {props.profileInfo.aboutMe}</p>}\r\n                            <p className={s.about}>Looking For A Job - {props.profileInfo.lookingForAJob === true ? 'Yes' : 'No'}</p>\r\n                            {props.profileInfo.lookingForAJobDescription != null && <p className={s.about}>{props.profileInfo.lookingForAJobDescription}</p>}\r\n                            <div className={s.accordion}>\r\n                                <h1 className={s.accordion_header}>Socials</h1>\r\n                                <div className={s.accordion_box}>\r\n                                    <Accordion defaultValue=\"GitHub\">\r\n                                        <Accordion.Item value=\"GitHub\">\r\n                                            <Accordion.Control>GitHub</Accordion.Control>\r\n                                            <Accordion.Panel>{props.profileInfo.contacts.github}</Accordion.Panel>\r\n                                        </Accordion.Item>\r\n                                        <Accordion.Item value=\"VK\">\r\n                                            <Accordion.Control>VK</Accordion.Control>\r\n                                            <Accordion.Panel>{props.profileInfo.contacts.vk}</Accordion.Panel>\r\n                                        </Accordion.Item>\r\n                                        <Accordion.Item value=\"Facebook\">\r\n                                            <Accordion.Control>Facebook</Accordion.Control>\r\n                                            <Accordion.Panel>{props.profileInfo.contacts.facebook}</Accordion.Panel>\r\n                                        </Accordion.Item>\r\n                                        <Accordion.Item value=\"Instagram\">\r\n                                            <Accordion.Control>Instagram</Accordion.Control>\r\n                                            <Accordion.Panel>{props.profileInfo.contacts.instagram}</Accordion.Panel>\r\n                                        </Accordion.Item>\r\n                                        <Accordion.Item value=\"Twitter\">\r\n                                            <Accordion.Control>Twitter</Accordion.Control>\r\n                                            <Accordion.Panel>{props.profileInfo.contacts.twitter}</Accordion.Panel>\r\n                                        </Accordion.Item>\r\n                                        <Accordion.Item value=\"Website\">\r\n                                            <Accordion.Control>Website</Accordion.Control>\r\n                                            <Accordion.Panel>{props.profileInfo.contacts.website}</Accordion.Panel>\r\n                                        </Accordion.Item>\r\n                                        <Accordion.Item value=\"Youtube\">\r\n                                            <Accordion.Control>Youtube</Accordion.Control>\r\n                                            <Accordion.Panel>{props.profileInfo.contacts.youtube}</Accordion.Panel>\r\n                                        </Accordion.Item>\r\n                                        <Accordion.Item value=\"MainLink\">\r\n                                            <Accordion.Control>MainLink</Accordion.Control>\r\n                                            <Accordion.Panel>{props.profileInfo.contacts.mainLink}</Accordion.Panel>\r\n                                        </Accordion.Item>\r\n                                    </Accordion>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </Tabs.Panel>\r\n                        <Tabs.Panel pt={30} value='Subs'>\r\n                        </Tabs.Panel>\r\n                    </Tabs>\r\n\r\n\r\n                </div>\r\n            </div>\r\n            {props.profileInfo.userId === props.authId &&\r\n                <form onSubmit={handleSubmit(onSubmit)} className='quick-posting page-block'>\r\n                    {   //@ts-ignore\r\n                        <Textarea error={errors?.postText?.message} label='Quick Post' size='xl' {...register(\"postText\", { required: \"✎ You must enter the text ⇒\", minLength: { value: 10, message: \"Min length is 10 symbols\" } })} placeholder='Enter Text'\r\n                            className='quick-posting-field' />}\r\n                    <div className='quick-posting-btnbox'>\r\n                        <input value={'Post'} type='submit' className='quick-posting__btn' />\r\n                    </div>\r\n                </form>}\r\n            <div className=\"page-block\">\r\n                {posts}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Profile;\r\n\r\n\r\n// const ProfilePage = (props) => {\r\n//     const userid = useParams()\r\n//     useEffect(() => {\r\n//         // if (!userid.id) {\r\n//         //     userid.id = props.userId;\r\n//         // }\r\n//         props.getUserProfile(userid.id);\r\n//     })\r\n//     return (<Profile {...props} />)\r\n// }","import { connect } from 'react-redux';\r\nimport { getUserProfile, setFollowedInfo, setStatus, setPhoto } from '../../redux/profile-reducer.ts';\r\nimport { addPost } from '../../redux/news-reducer.ts';\r\nimport { following } from \"../../redux/subs-reducer.ts\"\r\nimport { changeAuthPhoto, } from \"../../redux/auth-reducer.ts\"\r\nimport * as profileSelectors from \"../../redux/profile-selectors.ts\"\r\nimport { getSubscribeProgress } from \"../../redux/subs-selectors.ts\"\r\nimport Profile from './profile.tsx';\r\nimport React, { useEffect } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport { AuthRedirect } from '../common_components/hoc-components';\r\nimport { compose } from 'redux';\r\nimport { appStateType } from '../../redux/redux-store.ts';\r\ntype props = {\r\n    posts: postType[]\r\n    profileInfo: profileInfoType\r\n    userId: number\r\n    subscribeProgress: number[]\r\n    status: string\r\n    authId: number\r\n    authPhoto: string\r\n    login: string\r\n    addPost: () => void\r\n    getUserProfile: (userId: string) => void\r\n    setFollowedInfo: () => void\r\n    following: () => void\r\n    setStatus: () => void\r\n    setPhoto: () => void\r\n    changeAuthPhoto: () => void\r\n}\r\nconst ProfilePage: React.FC<props> = (props) => {\r\n    const userid = useParams()\r\n    const navigate = useNavigate()\r\n    useEffect(() => {\r\n        if (!userid.id) {\r\n            navigate('/profile/' + props.authId)\r\n        } else {\r\n            props.getUserProfile(userid.id);\r\n        }\r\n    }, [userid.id])\r\n    return (<Profile {...props} />)\r\n}\r\nconst mapStateToProps = (state: appStateType) => {\r\n    return {\r\n        posts: state.news.postData,\r\n        profileInfo: profileSelectors.getProfileInfo(state),\r\n        userId: profileSelectors.getUserId(state),\r\n        subscribeProgress: getSubscribeProgress(state),\r\n        status: profileSelectors.getStatus(state),\r\n        authId: state.auth.id,\r\n        authPhoto: state.auth.photo,\r\n        login: state.auth.login,\r\n    }\r\n}\r\n// export function withRouter(Children) {\r\n//     return (props) => {\r\n//         const match = { params: useParams() }\r\n//         return <Children {...props} match={match} />\r\n//     }\r\n// }\r\n\r\nexport default compose<React.Component<props>>(\r\n    connect(mapStateToProps,\r\n        {\r\n            addPost,\r\n            getUserProfile,\r\n            setFollowedInfo,\r\n            following,\r\n            setStatus,\r\n            setPhoto,\r\n            changeAuthPhoto,\r\n        }),\r\n    // withRouter,\r\n    AuthRedirect,\r\n)(ProfilePage);","import { appStateType } from \"./redux-store\"\r\n\r\nexport const getUsersArray = (state: appStateType) => {\r\n    return (state.subsPage.subsData)\r\n}\r\nexport const getPageSize = (state: appStateType) => {\r\n    return (state.subsPage.pageSize)\r\n}\r\nexport const getPageNumber = (state: appStateType) => {\r\n    return (state.subsPage.pageNumber)\r\n}\r\nexport const getTotalCount = (state: appStateType) => {\r\n    return (state.subsPage.totalCount)\r\n}\r\nexport const getIsFetching = (state: appStateType) => {\r\n    return (state.subsPage.isFetching)\r\n}\r\nexport const getSubscribeProgress = (state: appStateType) => {\r\n    return (state.subsPage.subscribeProgress)\r\n}"],"names":["mapStateToProps","state","auth","AuthRedirect","Component","connect","_React$Component","_inherits","_class","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","this","props","isAuth","_jsx","Navigate","to","_objectSpread","React","getProfileInfo","profilePage","profileInfo","getUserId","userId","getStatus","status","_useForm","useForm","register","reset","_useState","useState","_useState2","_slicedToArray","editMode","setEditMode","_useState3","_useState4","pencilMode","setPencilMode","changeImage","mode","_jsxs","className","s","children","autoFocus","onBlur","e","setStatus","authId","currentTarget","maxLength","placeholder","profileId","onClick","onMouseLeave","onMouseEnter","src","pencilColor","pencil","alt","_errors$postText","handleSubmit","errors","formState","posts","_toConsumableArray","reverse","filter","map","p","Post","postId","id","name","avatar","time","postimage","posttext","like_count","comments","rait","i","length","profile_head_img","Tabs","defaultValue","grow","pt","photos","large","logo","FileButton","onChange","setPhoto","changeAuthPhoto","accept","Button","color","variant","size","compact","fullName","ProfileStatus","concat","followed","aboutMe","lookingForAJob","lookingForAJobDescription","Accordion","contacts","github","vk","facebook","instagram","twitter","website","youtube","mainLink","onSubmit","addPost","login","authPhoto","postText","Textarea","error","message","label","required","minLength","type","compose","news","postData","profileSelectors","subscribeProgress","getSubscribeProgress","photo","getUserProfile","setFollowedInfo","following","userid","useParams","navigate","useNavigate","useEffect","Profile","getUsersArray","subsPage","subsData","getPageSize","pageSize","getPageNumber","pageNumber","getTotalCount","totalCount","getIsFetching","isFetching"],"sourceRoot":""}